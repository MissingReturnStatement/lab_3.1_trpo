set search_path to it;

drop table if exists Страховые_полисы;
create table if not exists Страховые_полисы
(
    Номер_полиса integer
    , ID_Компании integer not null
    , Регистрационный_номер integer not null
    , Дата_начала date not null
    , Дата_окончания date
    , Тип_страхования text not null
    , Сумма decimal not null
    , constraint PK_Страховые_полисы primary key(Номер_полиса)
    , constraint CH_Страховые_полисы_Сумма check (Сумма>=0)
);
CREATE SEQUENCE IF NOT EXISTS Страховые_полисы_seq MINVALUE 1;
alter TABLE Страховые_полисы alter column Номер_полиса set DEFAULT nextval('Страховые_полисы_seq');
ALTER SEQUENCE Страховые_полисы_seq OWNED BY Страховые_полисы.Номер_полиса;

drop table if exists Автомобили;
create table if not exists Автомобили
(
    Регистрационный_номер integer not null
    , Номер_лицензии integer not null
    , Марка text not null
    , Цвет text not null
    , Объем_двигателя decimal not null
    , Дата_тех_обслуживания date not null
    , Округ_регистрации text not null
    , constraint PK_Регистрационный_номер primary key(Регистрационный_номер)
    , constraint CH_Объем_двигателя check (Объем_двигателя >= 0 and Объем_двигателя < 10000)
);
CREATE SEQUENCE IF NOT EXISTS Регистрационный_номер_seq MINVALUE 1;
alter TABLE Автомобили alter column Регистрационный_номер set DEFAULT nextval('Регистрационный_номер_seq');
ALTER SEQUENCE Регистрационный_номер_seq OWNED BY Автомобили.Регистрационный_номер;

drop table if exists Владельцы;
create table if not exists Владельцы
(
    Номер_лицензии integer not null
    , ФИО text not null
    , Адрес text not null
    , Телефон text not null
    , constraint PK_Номер_лицензии primary key(Номер_лицензии)
);
CREATE SEQUENCE IF NOT EXISTS Владельцы_seq MINVALUE 1;
alter TABLE Владельцы alter column Номер_лицензии set DEFAULT nextval('Владельцы_seq');
ALTER SEQUENCE Владельцы_seq OWNED BY Владельцы.Номер_лицензии;

drop table if exists Страховые_компании;
create table if not exists Страховые_компании
(
    ID_Компании integer not null
    , Название text not null
    , Адрес text not null
    , Телефон text not null
    , constraint PK_ID_Компании primary key(ID_Компании)
);
CREATE SEQUENCE IF NOT EXISTS Страховые_компании_seq MINVALUE 1;
alter TABLE Страховые_компании alter column ID_Компании set DEFAULT nextval('Страховые_компании_seq');
ALTER SEQUENCE Страховые_компании_seq OWNED BY Страховые_компании.ID_Компании;

alter table Страховые_полисы
add constraint FK1_ID_Компании foreign key (ID_Компании) references Страховые_компании(ID_Компании),
add constraint FK2_Регистрационный_номер foreign key (Регистрационный_номер) references Автомобили(Регистрационный_номер);
alter table Автомобили
add constraint FK_Номер_лицензии foreign key (Номер_лицензии) references Владельцы(Номер_лицензии);


insert into "Страховые_компании" (Название, Адрес, Телефон) values 
  ('АльфаСтрахование', 'Томск, улица Красноармейская, 20', '+7 800 333-09-99'),
  ('Росгосстрах', '119991, Москва – 59, ГСП-1, улица Киевская, 7', '+7 800 200-09-00'),
  ('ВСК', 'Томск, улица Гагарина, 28', '+7 382 299-11-01'),
  ('Сбербанк Страхование', '115093, Москва, улица Павловская, 7', '+7 800 555-55-57'),
  ('Тинькофф Страхование', '127287, Москва, 2-я Хуторская улица, 38Ас26', '+7 499 605-05-50'),
  ('Ингосстрах', '117997, Москва, улица Пятницкая, 12с2', '+7 495 956-55-55'),
  ('СОГАЗ', 'Томск, улица Загорная, 4', '+7 382 228-49-00'),
  ('Магазин в котором Макар покупает молоко по 160 рублей','Где-то в Томске','Не хотелось бы знать'),
  ('Какой-то страх','нигде, улица пушкина - дом колотушкина', 'звони на тапок'),
  ('экзистенциальный страх', 'душа, тёмный закуток номер 4', 'обратись в себя'),
  ('Рабское страхование','блин, в томской области есть какой-то город со смешным названием, забыл как называется','+7 3822 794 991');

insert into "Владельцы" (ФИО, Адрес, Телефон) values 
  ('Денис Романов', 'Томск, Алеутская 4, посёлок Сосновый бор', '+7 3822 28-11-01,'),
  ('Романов Денис', 'Томск, улица Красноармейская, 6', '+7 465 228-35-22'),
  ('Денисов Роман', 'Томск, улица Лермонтова, 7', '+7 965 321-89-31'),
  ('Роман Денис', 'Красноярск, улица Ленина, 21', '+7 995 764-72-92'),
  ('Ренисов Доман', 'Томск, улица Дзержинского, 11', '+7 988 878-95-23'),
  ('Консультант Олег', 'Томск, улица Никитина, 90', '+7 947 574-54-18'),
  ('Жданов Егор', 'Томск, улица Киевская, 9', '+7 987 864-25-78'),
  ('Неизвестная личность Дениса #11', 'Томск, улица Аркадия Иванова, 22', '+7 923 234-32-54'),
  ('Савоськин Никита', 'Томск, улица Нахимова 11', '+7 923 143 14 33'),
  ('Денис, который забыл подписать контрольную','второй корпус ТГУ', 'я не знаю'),
  ('Никитин Савоська','голова Дениса', 'вжж вжж вжж'),
  ('Алексеенко Илья', 'Томск, улица Федора Лыткина 12','+7 777 77 77'),
  ('Медведь', 'Лес около дорого','+1 111 11 11'),
  ('Бурдакин Олег', 'Где-то в томске','+7 777 96 96');
  
  insert into "Автомобили" (Номер_лицензии,Марка, Цвет, Объем_двигателя, Дата_тех_обслуживания, Округ_регистрации) values
  (1,'TOYOTA', 'Черный', 3.51, '2020-11-30', 'Республика Чечня'),
  (2,'Matiz', 'Голубой', 0.82, '2023-07-26', 'Томская область'),
  (3,'FORD', 'Синий', 3.55, '2021-05-21', 'Республика Алтай'),
  (4,'FORD', 'Белый', 1.73, '2022-04-05', 'Республика Алтай'),
  (5,'AUDI', 'Темно-синий', 1.8, '2021-02-04', 'Республика Алтай'),
  (6,'KIA', 'Черный', 1.6, '2021-06-23', 'Томская область'),
  (7,'LADA', 'Красный', 1.4, '2019-09-16', 'Ставропольский край'),
  (8,'BMW', 'Серый', 2.5, '2020-10-13', 'Красноярский край'),
  (9,'MERCEDES-BENZ', 'Черный', 4.0, '2018-11-28', 'Томская область'),
  (10,'DODGE', 'Оранжевый', 6.222, '2023-07-09', 'Томская область'),
  (11,'LADA', 'Белый', 1.6, '2021-12-15', 'Республика Алтай'),
  (12,'LADA девятка Данилы', 'Черный', 1.841, '2023-02-08', 'Томская область'),
  (13,'Горящий Автомобиль','огонь',14, '2023-02-08','Анекдотная область'),
  (14,'Смешная штука, в которой пиццу, она ещё на учебной стоит, такая одноместная, может видели','дерево', 1337, '2023-02-09 ','Республика Хакасия');
  


insert into "Страховые_полисы" (ID_Компании, Регистрационный_номер, Дата_начала, Дата_окончания, Тип_страхования, Сумма) VALUES
  (1,  1,'2020-12-05', NULL, 'ОСАГО', 2.00),
  (2,  3,'2022-01-05', '2024-01-20', 'ОСАГО', 4100.00),
  (3,  2,'2023-08-30', '2023-09-06', 'КАСКО', 800.00),
  (4,  4,'2022-04-08', NULL, 'ДСАГО', 1700.00),
  (5,  5,'2021-03-10', '2024-03-10', 'ОСАГО', 1900.00),
  (6,  6,'2021-06-28', '2024-06-28', 'КАСКО', 2300.00),
  (7,  10,'2023-07-12', '2024-01-12', 'КАСКО', 90.00),
  (8,  7,'2019-09-18', '2025-09-18', 'КАСКО', 19.00),
  (9,  8,'2020-10-17', '2024-10-17', 'ОСАГО', 27.00),
  (3,  9,'2018-12-01', NULL, 'ДСАГО', 4500000000.00),
  (10,13, '2000-12-01', NULL, 'ДСАГО', 14000.00);




/*
Вывести номер лицензии и автомобилей марки “Ford” с объёмом 
двигателя больше 1.5 литра, страховка которых истекает в ближайшее две недели. Результат упорядочить по объёму двигателя. В выборке должны 
присутствовать только следующие атрибуты: Номер лицензии, марка автомобиля, объёмом двигателя, число полных дней до окончания страхового 
периода.
*/

select Номер_лицензии, Марка, Объем_двигателя, (Дата_окончания::date - current_date) as сколько_осталось from  Автомобили inner join Страховые_полисы
using(Регистрационный_номер) where (Марка = 'FORD' and Объем_двигателя > 1.5) and
(Дата_окончания::date - current_date < 14)
order by Объем_двигателя;
/*
Для каждого владельца найти истёкшие страховки, оформленные на срок менее 2 недель. В выборке должны присутствовать только следующие 
атрибуты: Номер лицензии и ФИО владельца машины, название кампании, количество дней страхования. Результат упорядочить по ФИО.
Владельцев, у которых нет таких страховок не выводить.
*/
select Номер_лицензии, ФИО, Название, (Дата_окончания::date - Дата_начала::date) as Сколько_осталось from Владельцы
inner join Автомобили using (Номер_лицензии) inner join Страховые_полисы using (Регистрационный_номер) inner join Страховые_компании using (ID_Компании)
where (Дата_окончания::date - Дата_начала::date) < 14
order by ФИО;
/*
Сформировать статистику по маркам машин. В выборке должны присутствовать следующие атрибуты: марка машины, число машин, средняя 
цена страхового полюса, средний срок страхования в днях для страховок ограниченного срока действия.
*/
select Марка, AVG(Сумма), AVG(Дата_окончания::date - Дата_начала::date), COUNT(Автомобили.Регистрационный_номер) as count from Автомобили
inner join Страховые_полисы using(Регистрационный_номер) where (Дата_окончания is not null)
group by Марка;
/*
3.4. Для каждой страховой компании найти среднюю сумма страхования, количество действующих страховок, количество застрахованных 
автомобилей, количество владельцев более чем одной страховки. В расчёт должны быть включены только действующие на данный момент 
страховки (страховок ограниченного срока действия). В выборке должны присутствовать только следующие атрибуты: Название компании, средняя 
сумма страхования, количество действующих страховок, количество застрахованных автомобилей, средний возраст владельцев страховок. 
*/
select Название, AVG(Сумма) as Средняя_сумма, Count(Номер_полиса)as Действ_страх, COUNT(Страховые_полисы.Регистрационный_номер) as Застрах_авто from Страховые_полисы inner join Страховые_компании using(ID_Компании)
group by Название;

--всем владельцам около 23
/*
Выбрать действующие страховые полисы, у которых сумма страховке выше средней или ниже средней по марке автомобиля на 15%. В выборке 
должны присутствовать только следующие атрибуты: марка автомобиля, номер страхового полюса, цена страховки, средняя цена страховки по
марке, отклонение суммы страховки от среднего.
*/
with new_table as (
  select Марка, avg(Сумма) as AVERAGE from Страховые_полисы INNER JOIN Автомобили USING (Регистрационный_номер) GROUP by Марка
) select new_table.Марка, Номер_полиса, Сумма, AVERAGE, AVERAGE - Сумма as difference 
from Страховые_полисы INNER JOIN Автомобили USING (Регистрационный_номер) INNER JOIN new_table using (Марка)
where Сумма < AVERAGE*1.15 and Сумма > AVERAGE*0.85;

/*
Найти автомобили, на данный момент нигде не застрахованные. В выборке должны присутствовать только следующие атрибуты: 
регистрационный номер автомобиля, ФИО владельца.
*/
select * from Автомобили;
select Регистрационный_номер, ФИО from Автомобили inner join Владельцы using(Номер_лицензии) left join Страховые_полисы using (Регистрационный_номер)
where Номер_полиса is null or Страховые_полисы.Дата_окончания < now();

/*
4.1. Увеличить страховую сумму в 1,5 раза для автомобилей с объемом двигателя более 2,5 литра
*/
update Страховые_полисы SET Сумма = Сумма*1.5 from
(SELECT Номер_полиса as id from Автомобили INNER JOIN Страховые_полисы using (Регистрационный_номер)
WHERE Объем_двигателя > 2.5) where Номер_полиса = id;
SELECT * from Страховые_полисы;

/*
4.2. Удалить сведения о страховых компаниях, не пропавших ни одного страхового полюса.
*/
DELETE from Страховые_компании where ID_Компании not in 
(SELECT DISTINCT ID_Компании from Страховые_полисы) RETURNING *;
/*
4.3. Вынести цвета автомобилей в отдельный справочник. 
*/
DROP TABLE if EXISTS Цвета_автомобилей;
CREATE table Цвета_автомобилей (
  Регистрационный_номер INTEGER not NULL,
  Цвет TEXT,
  UNIQUE (Регистрационный_номер)
);
INSERT into Цвета_автомобилей SELECT Регистрационный_номер, Цвет FROM "Автомобили";
ALTER TABLE Автомобили DROP COLUMN Цвет;
ALTER TABLE Автомобили add CONSTRAINT FK_Цвет FOREIGN KEY (Регистрационный_номер) REFERENCES Цвета_автомобилей (Регистрационный_номер);
SELECT Марка, Цвет from Автомобили inner JOIN Цвета_автомобилей USING (Регистрационный_номер);

/*
5.1. Оформить запросы 3.5 - 3.6 в виде представления.
*/
create or replace view my_view as (
with new_table as (
  select Марка, avg(Сумма) as AVERAGE from Страховые_полисы inner JOIN Автомобили USING (Регистрационный_номер) GROUP by Марка
) select new_table.Марка, Номер_полиса, Сумма, AVERAGE, AVERAGE - Сумма as difference 
from Страховые_полисы INNER JOIN Автомобили USING (Регистрационный_номер) inner JOIN new_table using (Марка)
where Сумма < AVERAGE*1.15 and Сумма > AVERAGE*0.85
);

create or replace view my_view1 as(
select Регистрационный_номер, ФИО from Автомобили inner join Владельцы using(Номер_лицензии) left join Страховые_полисы using (Регистрационный_номер)
where Номер_полиса is null or Страховые_полисы.Дата_окончания < now()
);

/*
5.2. Создать представление со следующими атрибутами: Номер лицензии, ФИО, телефон, марка машины, число дней с момента тех. осмотра, номер 
действующего полюса, тип и сумма страховки. Выборка должна включать только машины с действующими на данный момент полисами. 
*/
create or replace view my_view2 as(
select Номер_лицензии, ФИО, Телефон, Марка, (current_date - Дата_тех_обслуживания::date) as Дней_с_техобслуживания, Номер_полиса, Тип_страхования, Сумма from Страховые_полисы
	inner join Автомобили using(Регистрационный_номер) inner join Владельцы using(Номер_лицензии) where Дата_окончания::date > current_date or Дата_окончания is null
);
